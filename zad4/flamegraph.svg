<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="645.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="645.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.11%)</title><rect x="0.1578%" y="325" width="0.1127%" height="15" fill="rgb(227,0,7)"/><text x="0.4078%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30 samples, 0.14%)</title><rect x="1.0145%" y="149" width="0.1353%" height="15" fill="rgb(217,0,24)"/><text x="1.2645%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (76 samples, 0.34%)</title><rect x="0.8116%" y="165" width="0.3427%" height="15" fill="rgb(221,193,54)"/><text x="1.0616%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (175 samples, 0.79%)</title><rect x="1.3437%" y="149" width="0.7891%" height="15" fill="rgb(248,212,6)"/><text x="1.5937%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (445 samples, 2.01%)</title><rect x="0.5050%" y="213" width="2.0065%" height="15" fill="rgb(208,68,35)"/><text x="0.7550%" y="223.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (445 samples, 2.01%)</title><rect x="0.5050%" y="197" width="2.0065%" height="15" fill="rgb(232,128,0)"/><text x="0.7550%" y="207.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (445 samples, 2.01%)</title><rect x="0.5050%" y="181" width="2.0065%" height="15" fill="rgb(207,160,47)"/><text x="0.7550%" y="191.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (301 samples, 1.36%)</title><rect x="1.1543%" y="165" width="1.3572%" height="15" fill="rgb(228,23,34)"/><text x="1.4043%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (84 samples, 0.38%)</title><rect x="2.1327%" y="149" width="0.3788%" height="15" fill="rgb(218,30,26)"/><text x="2.3827%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (87 samples, 0.39%)</title><rect x="2.5115%" y="213" width="0.3923%" height="15" fill="rgb(220,122,19)"/><text x="2.7615%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (66 samples, 0.30%)</title><rect x="2.6062%" y="197" width="0.2976%" height="15" fill="rgb(250,228,42)"/><text x="2.8562%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (66 samples, 0.30%)</title><rect x="2.6062%" y="181" width="0.2976%" height="15" fill="rgb(240,193,28)"/><text x="2.8562%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (66 samples, 0.30%)</title><rect x="2.6062%" y="165" width="0.2976%" height="15" fill="rgb(216,20,37)"/><text x="2.8562%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (55 samples, 0.25%)</title><rect x="3.0075%" y="149" width="0.2480%" height="15" fill="rgb(206,188,39)"/><text x="3.2575%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (28 samples, 0.13%)</title><rect x="3.1292%" y="133" width="0.1263%" height="15" fill="rgb(217,207,13)"/><text x="3.3792%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (625 samples, 2.82%)</title><rect x="0.4734%" y="229" width="2.8181%" height="15" fill="rgb(231,73,38)"/><text x="0.7234%" y="239.50">ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (86 samples, 0.39%)</title><rect x="2.9038%" y="213" width="0.3878%" height="15" fill="rgb(225,20,46)"/><text x="3.1538%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u32 (75 samples, 0.34%)</title><rect x="2.9534%" y="197" width="0.3382%" height="15" fill="rgb(210,31,41)"/><text x="3.2034%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (63 samples, 0.28%)</title><rect x="3.0075%" y="181" width="0.2841%" height="15" fill="rgb(221,200,47)"/><text x="3.2575%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (63 samples, 0.28%)</title><rect x="3.0075%" y="165" width="0.2841%" height="15" fill="rgb(226,26,5)"/><text x="3.2575%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (41 samples, 0.18%)</title><rect x="4.1437%" y="149" width="0.1849%" height="15" fill="rgb(249,33,26)"/><text x="4.3937%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.35%)</title><rect x="3.9949%" y="165" width="0.3472%" height="15" fill="rgb(235,183,28)"/><text x="4.2449%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 0.59%)</title><rect x="3.8642%" y="181" width="0.5862%" height="15" fill="rgb(221,5,38)"/><text x="4.1142%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 0.67%)</title><rect x="3.8642%" y="197" width="0.6673%" height="15" fill="rgb(247,18,42)"/><text x="4.1142%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (25 samples, 0.11%)</title><rect x="4.5315%" y="197" width="0.1127%" height="15" fill="rgb(241,131,45)"/><text x="4.7815%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (25 samples, 0.11%)</title><rect x="4.5315%" y="181" width="0.1127%" height="15" fill="rgb(249,31,29)"/><text x="4.7815%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (25 samples, 0.11%)</title><rect x="4.5315%" y="165" width="0.1127%" height="15" fill="rgb(225,111,53)"/><text x="4.7815%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (23 samples, 0.10%)</title><rect x="4.6442%" y="149" width="0.1037%" height="15" fill="rgb(238,160,17)"/><text x="4.8942%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (497 samples, 2.24%)</title><rect x="3.2916%" y="213" width="2.2410%" height="15" fill="rgb(214,148,48)"/><text x="3.5416%" y="223.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (197 samples, 0.89%)</title><rect x="4.6442%" y="197" width="0.8883%" height="15" fill="rgb(232,36,49)"/><text x="4.8942%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (197 samples, 0.89%)</title><rect x="4.6442%" y="181" width="0.8883%" height="15" fill="rgb(209,103,24)"/><text x="4.8942%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (197 samples, 0.89%)</title><rect x="4.6442%" y="165" width="0.8883%" height="15" fill="rgb(229,88,8)"/><text x="4.8942%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (151 samples, 0.68%)</title><rect x="4.8517%" y="149" width="0.6809%" height="15" fill="rgb(213,181,19)"/><text x="5.1017%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (151 samples, 0.68%)</title><rect x="4.8517%" y="133" width="0.6809%" height="15" fill="rgb(254,191,54)"/><text x="5.1017%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (151 samples, 0.68%)</title><rect x="4.8517%" y="117" width="0.6809%" height="15" fill="rgb(241,83,37)"/><text x="5.1017%" y="127.50"></text></g><g><title>core::core_arch::simd::i8x16::new (151 samples, 0.68%)</title><rect x="4.8517%" y="101" width="0.6809%" height="15" fill="rgb(233,36,39)"/><text x="5.1017%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,247 samples, 5.62%)</title><rect x="0.1217%" y="373" width="5.6227%" height="15" fill="rgb(226,3,54)"/><text x="0.3717%" y="383.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::find (1,247 samples, 5.62%)</title><rect x="0.1217%" y="357" width="5.6227%" height="15" fill="rgb(245,192,40)"/><text x="0.3717%" y="367.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,247 samples, 5.62%)</title><rect x="0.1217%" y="341" width="5.6227%" height="15" fill="rgb(238,167,29)"/><text x="0.3717%" y="351.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1,214 samples, 5.47%)</title><rect x="0.2705%" y="325" width="5.4739%" height="15" fill="rgb(232,182,51)"/><text x="0.5205%" y="335.50">core::i..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,214 samples, 5.47%)</title><rect x="0.2705%" y="309" width="5.4739%" height="15" fill="rgb(231,60,39)"/><text x="0.5205%" y="319.50">core::o..</text></g><g><title>zad4::Graph::dijkstra::{{closure}} (1,214 samples, 5.47%)</title><rect x="0.2705%" y="293" width="5.4739%" height="15" fill="rgb(208,69,12)"/><text x="0.5205%" y="303.50">zad4::G..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1,214 samples, 5.47%)</title><rect x="0.2705%" y="277" width="5.4739%" height="15" fill="rgb(235,93,37)"/><text x="0.5205%" y="287.50">std::co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,169 samples, 5.27%)</title><rect x="0.4734%" y="261" width="5.2710%" height="15" fill="rgb(213,116,39)"/><text x="0.7234%" y="271.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,169 samples, 5.27%)</title><rect x="0.4734%" y="245" width="5.2710%" height="15" fill="rgb(222,207,29)"/><text x="0.7234%" y="255.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (544 samples, 2.45%)</title><rect x="3.2916%" y="229" width="2.4529%" height="15" fill="rgb(206,96,30)"/><text x="3.5416%" y="239.50">ha..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (47 samples, 0.21%)</title><rect x="5.5325%" y="213" width="0.2119%" height="15" fill="rgb(218,138,4)"/><text x="5.7825%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 0.11%)</title><rect x="6.4794%" y="357" width="0.1127%" height="15" fill="rgb(250,191,14)"/><text x="6.7294%" y="367.50"></text></g><g><title>&lt;zad4::adj_list::AdjList as zad4::Graph&gt;::distance (5,353 samples, 24.14%)</title><rect x="5.7444%" y="373" width="24.1365%" height="15" fill="rgb(239,60,40)"/><text x="5.9944%" y="383.50">&lt;zad4::adj_list::AdjList as zad4::Grap..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (5,165 samples, 23.29%)</title><rect x="6.5921%" y="357" width="23.2888%" height="15" fill="rgb(206,27,48)"/><text x="6.8421%" y="367.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,164 samples, 23.28%)</title><rect x="6.5966%" y="341" width="23.2843%" height="15" fill="rgb(225,35,8)"/><text x="6.8466%" y="351.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::..</text></g><g><title>&lt;zad4::adj_matrix::AdjMatrix as zad4::Graph&gt;::distance (68 samples, 0.31%)</title><rect x="29.9621%" y="373" width="0.3066%" height="15" fill="rgb(250,213,24)"/><text x="30.2121%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.37%)</title><rect x="30.9631%" y="261" width="0.3742%" height="15" fill="rgb(247,123,22)"/><text x="31.2131%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.37%)</title><rect x="30.9631%" y="245" width="0.3742%" height="15" fill="rgb(231,138,38)"/><text x="31.2131%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (83 samples, 0.37%)</title><rect x="30.9631%" y="229" width="0.3742%" height="15" fill="rgb(231,145,46)"/><text x="31.2131%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (83 samples, 0.37%)</title><rect x="30.9631%" y="213" width="0.3742%" height="15" fill="rgb(251,118,11)"/><text x="31.2131%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (83 samples, 0.37%)</title><rect x="30.9631%" y="197" width="0.3742%" height="15" fill="rgb(217,147,25)"/><text x="31.2131%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.32%)</title><rect x="31.0217%" y="181" width="0.3156%" height="15" fill="rgb(247,81,37)"/><text x="31.2717%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.11%)</title><rect x="31.3509%" y="197" width="0.1082%" height="15" fill="rgb(209,12,38)"/><text x="31.6009%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28 samples, 0.13%)</title><rect x="31.3419%" y="261" width="0.1263%" height="15" fill="rgb(227,1,9)"/><text x="31.5919%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.13%)</title><rect x="31.3419%" y="245" width="0.1263%" height="15" fill="rgb(248,47,43)"/><text x="31.5919%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.12%)</title><rect x="31.3464%" y="229" width="0.1217%" height="15" fill="rgb(221,10,30)"/><text x="31.5964%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.12%)</title><rect x="31.3464%" y="213" width="0.1217%" height="15" fill="rgb(210,229,1)"/><text x="31.5964%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (272 samples, 1.23%)</title><rect x="30.2687%" y="293" width="1.2264%" height="15" fill="rgb(222,148,37)"/><text x="30.5187%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (262 samples, 1.18%)</title><rect x="30.3138%" y="277" width="1.1814%" height="15" fill="rgb(234,67,33)"/><text x="30.5638%" y="287.50"></text></g><g><title>&lt;zad4::adj_matrix::AdjMatrix as zad4::Graph&gt;::node_neighbours (276 samples, 1.24%)</title><rect x="30.2687%" y="373" width="1.2445%" height="15" fill="rgb(247,98,35)"/><text x="30.5187%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (276 samples, 1.24%)</title><rect x="30.2687%" y="357" width="1.2445%" height="15" fill="rgb(247,138,52)"/><text x="30.5187%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (276 samples, 1.24%)</title><rect x="30.2687%" y="341" width="1.2445%" height="15" fill="rgb(213,79,30)"/><text x="30.5187%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (276 samples, 1.24%)</title><rect x="30.2687%" y="325" width="1.2445%" height="15" fill="rgb(246,177,23)"/><text x="30.5187%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (276 samples, 1.24%)</title><rect x="30.2687%" y="309" width="1.2445%" height="15" fill="rgb(230,62,27)"/><text x="30.5187%" y="319.50"></text></g><g><title>&lt;zad4::bundle::Bundle as zad4::Graph&gt;::distance (24 samples, 0.11%)</title><rect x="32.5413%" y="309" width="0.1082%" height="15" fill="rgb(216,154,8)"/><text x="32.7913%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (1,387 samples, 6.25%)</title><rect x="32.9380%" y="293" width="6.2539%" height="15" fill="rgb(244,35,45)"/><text x="33.1880%" y="303.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1,387 samples, 6.25%)</title><rect x="32.9380%" y="277" width="6.2539%" height="15" fill="rgb(251,115,12)"/><text x="33.1880%" y="287.50">core::it..</text></g><g><title>&lt;zad4::bundle::Bundle as zad4::Graph&gt;::distance::{{closure}} (1,387 samples, 6.25%)</title><rect x="32.9380%" y="261" width="6.2539%" height="15" fill="rgb(240,54,50)"/><text x="33.1880%" y="271.50">&lt;zad4::b..</text></g><g><title>core::iter::traits::iterator::Iterator::find (2,646 samples, 11.93%)</title><rect x="32.5142%" y="357" width="11.9307%" height="15" fill="rgb(233,84,52)"/><text x="32.7642%" y="367.50">core::iter::traits..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,646 samples, 11.93%)</title><rect x="32.5142%" y="341" width="11.9307%" height="15" fill="rgb(207,117,47)"/><text x="32.7642%" y="351.50">&lt;core::iter::adapt..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,646 samples, 11.93%)</title><rect x="32.5142%" y="325" width="11.9307%" height="15" fill="rgb(249,43,39)"/><text x="32.7642%" y="335.50">&lt;core::iter::adapt..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,616 samples, 11.80%)</title><rect x="32.6495%" y="309" width="11.7955%" height="15" fill="rgb(209,38,44)"/><text x="32.8995%" y="319.50">core::iter::trait..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,165 samples, 5.25%)</title><rect x="39.1920%" y="293" width="5.2530%" height="15" fill="rgb(236,212,23)"/><text x="39.4420%" y="303.50">&lt;core:..</text></g><g><title>&lt;zad4::bundle::Bundle as zad4::Graph&gt;::distance (2,884 samples, 13.00%)</title><rect x="31.5132%" y="373" width="13.0039%" height="15" fill="rgb(242,79,21)"/><text x="31.7632%" y="383.50">&lt;zad4::bundle::Bundl..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26 samples, 0.12%)</title><rect x="44.5171%" y="293" width="0.1172%" height="15" fill="rgb(211,96,35)"/><text x="44.7671%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (26 samples, 0.12%)</title><rect x="44.5171%" y="277" width="0.1172%" height="15" fill="rgb(253,215,40)"/><text x="44.7671%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.14%)</title><rect x="44.5171%" y="357" width="0.1353%" height="15" fill="rgb(211,81,21)"/><text x="44.7671%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.14%)</title><rect x="44.5171%" y="341" width="0.1353%" height="15" fill="rgb(208,190,38)"/><text x="44.7671%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 0.14%)</title><rect x="44.5171%" y="325" width="0.1353%" height="15" fill="rgb(235,213,38)"/><text x="44.7671%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30 samples, 0.14%)</title><rect x="44.5171%" y="309" width="0.1353%" height="15" fill="rgb(237,122,38)"/><text x="44.7671%" y="319.50"></text></g><g><title>&lt;zad4::bundle::Bundle as zad4::Graph&gt;::node_neighbours (31 samples, 0.14%)</title><rect x="44.5171%" y="373" width="0.1398%" height="15" fill="rgb(244,218,35)"/><text x="44.7671%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (72 samples, 0.32%)</title><rect x="45.5677%" y="341" width="0.3246%" height="15" fill="rgb(240,68,47)"/><text x="45.8177%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 0.65%)</title><rect x="49.0306%" y="309" width="0.6493%" height="15" fill="rgb(210,16,53)"/><text x="49.2806%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 0.65%)</title><rect x="49.0306%" y="293" width="0.6493%" height="15" fill="rgb(235,124,12)"/><text x="49.2806%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (1,192 samples, 5.37%)</title><rect x="44.6569%" y="373" width="5.3747%" height="15" fill="rgb(224,169,11)"/><text x="44.9069%" y="383.50">alloc::..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1,106 samples, 4.99%)</title><rect x="45.0446%" y="357" width="4.9869%" height="15" fill="rgb(250,166,2)"/><text x="45.2946%" y="367.50">alloc:..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (897 samples, 4.04%)</title><rect x="45.9870%" y="341" width="4.0445%" height="15" fill="rgb(242,216,29)"/><text x="46.2370%" y="351.50">allo..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (897 samples, 4.04%)</title><rect x="45.9870%" y="325" width="4.0445%" height="15" fill="rgb(230,116,27)"/><text x="46.2370%" y="335.50">allo..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (77 samples, 0.35%)</title><rect x="49.6844%" y="309" width="0.3472%" height="15" fill="rgb(228,99,48)"/><text x="49.9344%" y="319.50"></text></g><g><title>zad4::Graph::dijkstra (11,160 samples, 50.32%)</title><rect x="0.0045%" y="389" width="50.3201%" height="15" fill="rgb(253,11,6)"/><text x="0.2545%" y="399.50">zad4::Graph::dijkstra</text></g><g><title>zad4::Graph::dijkstra (27 samples, 0.12%)</title><rect x="50.2029%" y="373" width="0.1217%" height="15" fill="rgb(247,143,39)"/><text x="50.4529%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (109 samples, 0.49%)</title><rect x="50.3337%" y="133" width="0.4915%" height="15" fill="rgb(236,97,10)"/><text x="50.5837%" y="143.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 0.49%)</title><rect x="50.3337%" y="117" width="0.4915%" height="15" fill="rgb(233,208,19)"/><text x="50.5837%" y="127.50"></text></g><g><title>&lt;zad4::adj_list::AdjList as zad4::Graph&gt;::connect (116 samples, 0.52%)</title><rect x="50.3246%" y="149" width="0.5230%" height="15" fill="rgb(216,164,2)"/><text x="50.5746%" y="159.50"></text></g><g><title>zad4::adj_list::AdjList::random_connected (132 samples, 0.60%)</title><rect x="50.3246%" y="389" width="0.5952%" height="15" fill="rgb(220,129,5)"/><text x="50.5746%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (132 samples, 0.60%)</title><rect x="50.3246%" y="373" width="0.5952%" height="15" fill="rgb(242,17,10)"/><text x="50.5746%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="357" width="0.5952%" height="15" fill="rgb(242,107,0)"/><text x="50.5746%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="341" width="0.5952%" height="15" fill="rgb(251,28,31)"/><text x="50.5746%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="325" width="0.5952%" height="15" fill="rgb(233,223,10)"/><text x="50.5746%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="309" width="0.5952%" height="15" fill="rgb(215,21,27)"/><text x="50.5746%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="293" width="0.5952%" height="15" fill="rgb(232,23,21)"/><text x="50.5746%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="277" width="0.5952%" height="15" fill="rgb(244,5,23)"/><text x="50.5746%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (132 samples, 0.60%)</title><rect x="50.3246%" y="261" width="0.5952%" height="15" fill="rgb(226,81,46)"/><text x="50.5746%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (132 samples, 0.60%)</title><rect x="50.3246%" y="245" width="0.5952%" height="15" fill="rgb(247,70,30)"/><text x="50.5746%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="229" width="0.5952%" height="15" fill="rgb(212,68,19)"/><text x="50.5746%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="213" width="0.5952%" height="15" fill="rgb(240,187,13)"/><text x="50.5746%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (132 samples, 0.60%)</title><rect x="50.3246%" y="197" width="0.5952%" height="15" fill="rgb(223,113,26)"/><text x="50.5746%" y="207.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (132 samples, 0.60%)</title><rect x="50.3246%" y="181" width="0.5952%" height="15" fill="rgb(206,192,2)"/><text x="50.5746%" y="191.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (132 samples, 0.60%)</title><rect x="50.3246%" y="165" width="0.5952%" height="15" fill="rgb(241,108,4)"/><text x="50.5746%" y="175.50"></text></g><g><title>core::intrinsics::copy (10,630 samples, 47.93%)</title><rect x="51.0416%" y="117" width="47.9304%" height="15" fill="rgb(247,173,49)"/><text x="51.2916%" y="127.50">core::intrinsics::copy</text></g><g><title>__memmove_avx_unaligned_erms (10,623 samples, 47.90%)</title><rect x="51.0731%" y="101" width="47.8988%" height="15" fill="rgb(224,114,35)"/><text x="51.3231%" y="111.50">__memmove_avx_unaligned_erms</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (10,635 samples, 47.95%)</title><rect x="51.0416%" y="133" width="47.9529%" height="15" fill="rgb(245,159,27)"/><text x="51.2916%" y="143.50">alloc::vec::Vec&lt;T,A&gt;::insert</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (75 samples, 0.34%)</title><rect x="99.0892%" y="69" width="0.3382%" height="15" fill="rgb(245,172,44)"/><text x="99.3392%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (72 samples, 0.32%)</title><rect x="99.1027%" y="53" width="0.3246%" height="15" fill="rgb(236,23,11)"/><text x="99.3527%" y="63.50"></text></g><g><title>&lt;zad4::bundle::Bundle as zad4::Graph&gt;::connect::{{closure}} (26 samples, 0.12%)</title><rect x="99.3101%" y="37" width="0.1172%" height="15" fill="rgb(205,117,38)"/><text x="99.5601%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (105 samples, 0.47%)</title><rect x="98.9945%" y="133" width="0.4734%" height="15" fill="rgb(237,72,25)"/><text x="99.2445%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (105 samples, 0.47%)</title><rect x="98.9945%" y="117" width="0.4734%" height="15" fill="rgb(244,70,9)"/><text x="99.2445%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (105 samples, 0.47%)</title><rect x="98.9945%" y="101" width="0.4734%" height="15" fill="rgb(217,125,39)"/><text x="99.2445%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (105 samples, 0.47%)</title><rect x="98.9945%" y="85" width="0.4734%" height="15" fill="rgb(235,36,10)"/><text x="99.2445%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (98 samples, 0.44%)</title><rect x="99.4679%" y="133" width="0.4419%" height="15" fill="rgb(251,123,47)"/><text x="99.7179%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (98 samples, 0.44%)</title><rect x="99.4679%" y="117" width="0.4419%" height="15" fill="rgb(221,13,13)"/><text x="99.7179%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (98 samples, 0.44%)</title><rect x="99.4679%" y="101" width="0.4419%" height="15" fill="rgb(238,131,9)"/><text x="99.7179%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (93 samples, 0.42%)</title><rect x="99.4905%" y="85" width="0.4193%" height="15" fill="rgb(211,50,8)"/><text x="99.7405%" y="95.50"></text></g><g><title>&lt;zad4::bundle::Bundle as zad4::Graph&gt;::connect::{{closure}} (93 samples, 0.42%)</title><rect x="99.4905%" y="69" width="0.4193%" height="15" fill="rgb(245,182,24)"/><text x="99.7405%" y="79.50"></text></g><g><title>&lt;zad4::bundle::Bundle as zad4::Graph&gt;::connect (10,849 samples, 48.92%)</title><rect x="51.0010%" y="149" width="48.9178%" height="15" fill="rgb(242,14,37)"/><text x="51.2510%" y="159.50">&lt;zad4::bundle::Bundle as zad4::Graph&gt;::connect</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (10,861 samples, 48.97%)</title><rect x="51.0010%" y="181" width="48.9720%" height="15" fill="rgb(246,228,12)"/><text x="51.2510%" y="191.50">core::iter::adapters::filter::filter_fold::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (10,861 samples, 48.97%)</title><rect x="51.0010%" y="165" width="48.9720%" height="15" fill="rgb(213,55,15)"/><text x="51.2510%" y="175.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>__libc_start_main (22,173 samples, 99.98%)</title><rect x="0.0045%" y="565" width="99.9775%" height="15" fill="rgb(209,9,3)"/><text x="0.2545%" y="575.50">__libc_start_main</text></g><g><title>main (22,173 samples, 99.98%)</title><rect x="0.0045%" y="549" width="99.9775%" height="15" fill="rgb(230,59,30)"/><text x="0.2545%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (22,173 samples, 99.98%)</title><rect x="0.0045%" y="533" width="99.9775%" height="15" fill="rgb(209,121,21)"/><text x="0.2545%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (22,173 samples, 99.98%)</title><rect x="0.0045%" y="517" width="99.9775%" height="15" fill="rgb(220,109,13)"/><text x="0.2545%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,173 samples, 99.98%)</title><rect x="0.0045%" y="501" width="99.9775%" height="15" fill="rgb(232,18,1)"/><text x="0.2545%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,173 samples, 99.98%)</title><rect x="0.0045%" y="485" width="99.9775%" height="15" fill="rgb(215,41,42)"/><text x="0.2545%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (22,173 samples, 99.98%)</title><rect x="0.0045%" y="469" width="99.9775%" height="15" fill="rgb(224,123,36)"/><text x="0.2545%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (22,173 samples, 99.98%)</title><rect x="0.0045%" y="453" width="99.9775%" height="15" fill="rgb(240,125,3)"/><text x="0.2545%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22,173 samples, 99.98%)</title><rect x="0.0045%" y="437" width="99.9775%" height="15" fill="rgb(205,98,50)"/><text x="0.2545%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (22,173 samples, 99.98%)</title><rect x="0.0045%" y="421" width="99.9775%" height="15" fill="rgb(205,185,37)"/><text x="0.2545%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>zad4::main (22,173 samples, 99.98%)</title><rect x="0.0045%" y="405" width="99.9775%" height="15" fill="rgb(238,207,15)"/><text x="0.2545%" y="415.50">zad4::main</text></g><g><title>zad4::bundle::Bundle::random_connected (10,863 samples, 48.98%)</title><rect x="51.0010%" y="389" width="48.9810%" height="15" fill="rgb(213,199,42)"/><text x="51.2510%" y="399.50">zad4::bundle::Bundle::random_connected</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10,863 samples, 48.98%)</title><rect x="51.0010%" y="373" width="48.9810%" height="15" fill="rgb(235,201,11)"/><text x="51.2510%" y="383.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="357" width="48.9810%" height="15" fill="rgb(207,46,11)"/><text x="51.2510%" y="367.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::I..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="341" width="48.9810%" height="15" fill="rgb(241,35,35)"/><text x="51.2510%" y="351.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterato..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="325" width="48.9810%" height="15" fill="rgb(243,32,47)"/><text x="51.2510%" y="335.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="309" width="48.9810%" height="15" fill="rgb(247,202,23)"/><text x="51.2510%" y="319.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="293" width="48.9810%" height="15" fill="rgb(219,102,11)"/><text x="51.2510%" y="303.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="277" width="48.9810%" height="15" fill="rgb(243,110,44)"/><text x="51.2510%" y="287.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (10,863 samples, 48.98%)</title><rect x="51.0010%" y="261" width="48.9810%" height="15" fill="rgb(222,74,54)"/><text x="51.2510%" y="271.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (10,863 samples, 48.98%)</title><rect x="51.0010%" y="245" width="48.9810%" height="15" fill="rgb(216,99,12)"/><text x="51.2510%" y="255.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterato..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="229" width="48.9810%" height="15" fill="rgb(226,22,26)"/><text x="51.2510%" y="239.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="213" width="48.9810%" height="15" fill="rgb(217,163,10)"/><text x="51.2510%" y="223.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Itera..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (10,863 samples, 48.98%)</title><rect x="51.0010%" y="197" width="48.9810%" height="15" fill="rgb(213,25,53)"/><text x="51.2510%" y="207.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>all (22,178 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="623.50"></text></g><g><title>zad4 (22,178 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="607.50">zad4</text></g><g><title>_start (22,178 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="591.50">_start</text></g></svg></svg>